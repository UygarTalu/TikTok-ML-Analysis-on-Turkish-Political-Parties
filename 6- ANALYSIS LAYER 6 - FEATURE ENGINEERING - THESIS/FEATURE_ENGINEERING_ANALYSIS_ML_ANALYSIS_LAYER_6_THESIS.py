########################################################################################################################
########################################################################################################################
########################################################################################################################


################################## FEATURE ENGINEERING - ANALYSIS LAYER 6 ##############################################

###INFORMATION ABOUT THE SCRIPT(ANALYSIS LAYER 6)
"""
IN THE ANALYSIS LAYER ONE WE HAVE 4 DIFFERENT COMPLEX FUNCTIONS.
1- "robust_metrics_feature_engineering"
2- "preprocess_topic"
3- "cosine_similarity_topics"
4- "calculate_and_save_similarity"

Results for Layer 2- At the end of execution of layer 3 we obtain the newly created features by using the features
created in previous layers. In adition we also obtain the similarity scores in between the topic labels of comments
and the recognized speeches.
"""


#NEW FEATURES CREATOR FUNCTION
########################################################################################################################

#Replacing '-' with NaN: This step ensures that any occurrences of '-' in the dataframe are replaced with
#NaN (missing value).

#Creating 'Engagement_Rate_FE' feature: This feature is calculated by dividing the number of diggs (video_diggcount) by
#the number of plays (video_playcount). It represents the engagement rate of a video, indicating how many diggs a video
#receives per play.

#Creating 'Face_Detection_Rate_FE' feature: This feature is calculated by dividing the number of frames in which a face
#is detected (Number of Frames Face Detected) by the total number of frames in the video (Total Frame Of The Video).
#It represents the rate of face detection in a video, indicating how often faces appear in the frames.

#Creating 'Dominant_Emotion_Score_FE' feature: This feature is calculated by taking the maximum value among a set of
#emotion confidence level columns (Angry, Disgust, Fear, Happy, Sad, Surprise, Neutral). It represents the dominant
#emotion score in a video, indicating the most prevalent or intense emotion detected.

#Creating 'Emotional_Diversity_FE' feature: This feature is calculated by taking the standard deviation of the
#emotion confidence level columns and dividing it by the total number of frames in the video. It represents the emotional
#diversity in a video, indicating the variation or spread of emotions across the frames.

#Creating 'Sentiment_Disparity_FE' feature: This feature is calculated by subtracting the sentiment scores from
#recognized speeches (Sentiment_Scores_Recognized_Speeches) from the sentiment scores from comments
#(Sentiment_Scores_Comments). It represents the disparity or difference in sentiment between speeches and comments.

#Creating 'Engagement_Per_Second_FE' feature: This feature is calculated by dividing the overall engagement metric
#(engagement_metric_all) by the duration of the video (video_duration). It represents the engagement per second,
#indicating the level of engagement generated by the video over its duration.

#Saving the dataframe as a CSV file: The modified dataframe is saved as a CSV
#file named 'Final_Dataframe_With_Robust_Metrics.csv' on the desktop.
#Returning the modified dataframe: The function returns the modified dataframe to the caller.

all_features_daraframe = pd.read_csv("C:/Users/Uygar TALU/Desktop/ALL_RESULTS_COMBINED.csv")


def robust_metrics_feature_engineering(dataframe):
    """
    Perform feature engineering on the given dataframe to create robust metrics.

    Args:
        dataframe (pandas.DataFrame): The input dataframe containing the required columns.

    Returns:
        pandas.DataFrame: The modified dataframe with the newly created features.
    """

    # Replace '-' with NaN
    dataframe.replace("-", np.nan, inplace=True)

    print("Starting feature engineering...")

    # Engagement Rate
    print("Creating 'Engagement_Rate_FE' feature...")
    dataframe['Engagement_Rate_FE'] = dataframe['video_diggcount'] / dataframe['video_playcount']

    # Face Detection Rate
    print("Creating 'Face_Detection_Rate_FE' feature...")
    dataframe['Face_Detection_Rate_FE'] = dataframe['Number of Frames Face Detected'] / dataframe[
        'Total Frame Of The Video']

    # Dominant Emotion Score
    print("Creating 'Dominant_Emotion_Score_FE' feature...")
    emotion_cols = ['Angry (Confidence level)', 'Disgust (Confidence level)', 'Fear (Confidence level)',
                    'Happy (Confidence level)', 'Sad (Confidence level)', 'Surprise (Confidence level)',
                    'Neutral (Confidence level)']
    dataframe['Dominant_Emotion_Score_FE'] = dataframe[emotion_cols].max(axis=1)

    # Emotional Diversity
    print("Creating 'Emotional_Diversity_FE' feature...")
    dataframe['Emotional_Diversity_FE'] = dataframe[emotion_cols].std(axis=1) / dataframe['Total Frame Of The Video']

    # Comment Sentiment - Speech Sentiment
    print("Creating 'Sentiment_Disparity_FE' feature...")
    dataframe['Sentiment_Disparity_FE'] = dataframe['Sentiment_Scores_Comments'] - dataframe[
        'Sentiment_Scores_Recognized_Speeches']

    # Engagement per Second
    print("Creating 'Engagement_Per_Second_FE' feature...")
    dataframe['Engagement_Per_Second_FE'] = dataframe['engagement_metric_all'] / dataframe['video_duration']

    print("Finished feature engineering, now saving to CSV on your desktop...")

    # Save the dataframe as a csv file on your desktop
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
    dataframe.to_csv(os.path.join(desktop, 'Final_Dataframe_With_Robust_Metrics.csv'), index=False)

    print("CSV file saved successfully on your desktop.")

    return dataframe

#EXECUTION
robust_metrics_feature_engineering(all_features_daraframe)
########################################################################################################################




#TOPIC LABELS SEMANTIC MEANING SIMILARITY FEATURE - PRETRAINED MODEL USED IS GOOGLENEWS
########################################################################################################################
########################################################################################################################
########################################################################################################################

#The preprocess_topic function takes a topic as input, converts it to lowercase, splits it into individual words, and
#removes stop words. It returns a preprocessed list of words representing the topic.
#The cosine_similarity_topics function calculates the cosine similarity between two topics represented as word vectors.
#It takes two topic lists as input and returns the cosine similarity score.
#The calculate_and_save_similarity function calculates the topic alignment scores between comments and speeches in the
#dataframe. It creates dictionaries to store the average similarities for each topic. It populates these dictionaries by
#iterating over the unique topic labels in the 'Topic_Labels_Comments' and 'Topic_Labels_Recognized_Speeches' columns,
#preprocessing the topics, and calculating the average similarities with other topics.
#The main function calculate_similarity calculates the topic alignment score for each row of the dataframe. It retrieves
#the comments and speeches topics, preprocesses them if they are not empty or "-", and calculates the similarity score
#using the cosine_similarity_topics function. If either topic is empty, it uses the average similarity from the
#corresponding dictionary. If both topics are empty or None, it returns NaN.
#Finally, the function adds a 'Topic_Alignment_Score' column to the dataframe and saves the modified
#dataframe as a CSV file.

#IMPORTING THE DATAFRAME WHICH HAS ROBUST FEATURES IN IT
final_df_with_robust_metrics = pd.read_csv("C:/Users/Uygar TALU/Desktop/Final_Dataframe_With_Robust_Metrics.csv")

#IMPORTING THE PRETRAINED MODEL
model = KeyedVectors.load_word2vec_format("C:/Users/Uygar TALU/Desktop/GoogleNews-vectors-negative300.bin.gz",
                                          binary=True)

#CALLING FOR STOPWORDS AS ENGLISH SINCE THE TOPC LABELS ARE IN ENGLISH
stop_words = set(stopwords.words('english'))


############################# TOPIC PREPROCESSER FUNCTION #############################

#The function first checks if the topic parameter (which is expected to be a string of text) is missing or not a
#number (NaN). If it is, the function returns an empty list.

#If the topic is not NaN, the function converts all the characters in the topic string to lowercase. This is done
#because in text analysis, words are often case-sensitive,

#After converting to lowercase, the function splits the topic string into a list of words.

#The function then filters out any "stop words" from the list of words.

#Finally, the function returns the preprocessed topic as a list of words, with each word being a separate string in the list.


def preprocess_topic(topic):
    """
    Preprocesses a topic by converting it to lowercase, splitting it into words,
    and removing stop words.

    Args:
        topic (str): The topic to be preprocessed.

    Returns:
        list: The preprocessed topic as a list of words.
    """
    if pd.isna(topic):
        return []
    topic = topic.lower().split()
    topic = [word for word in topic if word not in stop_words]
    return topic




######## COSINE SIMILARITY CALCULATOR FUNCTION IN BETWEEN TWO TOPICS(Topic of comment and topic of speech) #########

#The function takes in two topics (each a list of words) as arguments.

#For each topic, it calculates an average word vector. This is done by mapping each word in the topic to a word vector
# (using pre-trained model), and then averaging these vectors.

#If the word vectors for both topics are valid, it computes the cosine similarity between these two vectors.

#The function returns this cosine similarity value, which gives an indication of how similar the two topics are to
# each other. If the word vectors are not valid, the function returns 'NaN' (Not a Number).

def cosine_similarity_topics(topic1, topic2):
    """
    Calculates the cosine similarity between two topics represented as word vectors.

    Args:
        topic1 (list): The first topic as a list of words.
        topic2 (list): The second topic as a list of words.

    Returns:
        float: The cosine similarity between the two topics. Returns NaN if the word vectors are invalid.
    """
    topic1_vec = np.mean([model[word] for word in topic1 if word in model], axis=0)
    topic2_vec = np.mean([model[word] for word in topic2 if word in model], axis=0)

    if type(topic1_vec) == np.ndarray and type(topic2_vec) == np.ndarray:
        return cosine_similarity(topic1_vec.reshape(1, -1), topic2_vec.reshape(1, -1))[0][0]
    else:
        return np.nan


###################### EXECUTION FUNCTION FOR TOPIC ALIGNMENT SCORE FEATURE ######################

#The function first sets up two dictionaries, avg_similarities_comments and
#avg_similarities_speeches, to store the average similarity scores for each topic in the comments and
#speeches, respectively.

#After that function iterates through the unique topics found in the comments and speeches
#(ignoring any missing values or "-"). For each topic, it preprocesses the topic label
#(converts to lowercase, removes stopwords, etc.) and calculates the cosine similarity with every other topic.
#It averages these similarity scores and stores the result in the appropriate dictionary.

#After, the function calculate_similarity(row)  next. This function is used to compute
#the similarity score for a single row in the dataframe. If both comment and speech topics for the row are non-empty,
#it calculates the cosine similarity between them. If only one topic is available, it retrieves the average similarity
#for that topic from the appropriate dictionary. If both topics are empty or "-", it returns 'NaN'.

#Then consine similarity function is applied to every row in the dataframe to compute the
#'Topic_Alignment_Score'. The result is stored in a new column in the dataframe.

#Finally, the function saves the updated dataframe as a CSV file in the specified path.


def calculate_and_save_similarity(df, path, filename):
    """
    Calculates the topic alignment scores between comments and speeches in the dataframe and saves the modified dataframe.

    Args:
        df (pandas.DataFrame): The input dataframe containing columns 'Topic_Labels_Comments' and 'Topic_Labels_Recognized_Speeches'.
        path (str): The path to the directory where the CSV file will be saved.
        filename (str): The name of the CSV file.

    Returns:
        None
    """
    # Create a dictionary to store the average similarity for each topic
    avg_similarities_comments = {}
    avg_similarities_speeches = {}

    # Populate the dictionary for comments topics
    for topic_label in df['Topic_Labels_Comments'].dropna().unique():
        if topic_label != "-":
            topic = preprocess_topic(topic_label)
            similarities = [cosine_similarity_topics(topic, preprocess_topic(other_label))
                            for other_label in df['Topic_Labels_Comments'].dropna().unique() if other_label != topic_label and other_label != "-"]
            avg_similarities_comments[topic_label] = np.mean(similarities)

    # Populate the dictionary for speeches topics
    for topic_label in df['Topic_Labels_Recognized_Speeches'].dropna().unique():
        if topic_label != "-":
            topic = preprocess_topic(topic_label)
            similarities = [cosine_similarity_topics(topic, preprocess_topic(other_label))
                            for other_label in df['Topic_Labels_Recognized_Speeches'].dropna().unique() if other_label != topic_label and other_label != "-"]
            avg_similarities_speeches[topic_label] = np.mean(similarities)

    def calculate_similarity(row):
        comments_topic_label = row['Topic_Labels_Comments']
        speeches_topic_label = row['Topic_Labels_Recognized_Speeches']

        comments_topic = preprocess_topic(comments_topic_label) if comments_topic_label != "-" else None
        speeches_topic = preprocess_topic(speeches_topic_label) if speeches_topic_label != "-" else None

        if comments_topic and speeches_topic:  # both are not empty
            return cosine_similarity_topics(comments_topic, speeches_topic)
        elif comments_topic:  # comments topic is not empty
            print("Comments topic is not empty, using average similarity.")
            return avg_similarities_comments.get(comments_topic_label, np.nan)
        elif speeches_topic:  # speeches topic is not empty
            print("Speeches topic is not empty, using average similarity.")
            return avg_similarities_speeches.get(speeches_topic_label, np.nan)
        else:  # both are empty or None
            print("Both topics are empty.")
            return np.nan

    df['Topic_Alignment_Score'] = df.apply(calculate_similarity, axis=1)

    # save the dataframe
    df.to_csv(os.path.join(path, filename), index=False)



##EXECUTION OF THE TOPIC ALIGNMENT GENERATOR FUNCTION
########################################################################################################################

calculate_and_save_similarity(all_features_daraframe, "C:/Users/Uygar TALU/Desktop/", 'topic_alignment_added.csv')

general_data_correlation_and_clustering_analysis = pd.read_csv("C:/Users/Uygar TALU/Desktop/topic_alignment_added.csv")
########################################################################################################################


##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################
##################################################################################################################################






























































































































